use lilacc_ast::{expr::*, lit::*, op::*, pat::*, stmt::*, token::*, ty::*};

grammar;

Primary: Expr = {
    "Lit" => Expr::Lit(ExprLit {lit: <>}),
    "Ident" => Expr::Ident(ExprIdent {name: <>}),
    "(" <Expr> ")",
};

Unary: Expr = {
    "-" <p: Primary> => Expr::Unary(ExprUnary {op: UnOp::Neg, expr: Box::new(p)}),
    Primary,
};

Mul: Expr = {
    <lhs: Mul> "*" < rhs: Unary> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Mul, right: Box::new(rhs)}),
    <lhs: Mul> "/" < rhs: Unary> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Div, right: Box::new(rhs)}),
    Unary,
};

Add: Expr = {
    <lhs: Add> "+" < rhs: Mul> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Add, right: Box::new(rhs)}),
    <lhs: Add> "-" < rhs: Mul> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Sub, right: Box::new(rhs)}),
    Mul,
};

Relational: Expr = {
    <lhs: Add> "<" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Lt, right: Box::new(rhs)}),
    <lhs: Add> "<=" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Le, right: Box::new(rhs)}),
    <lhs: Add> "==" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Eq, right: Box::new(rhs)}),
    <lhs: Add> "!=" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Ne, right: Box::new(rhs)}),
    <lhs: Add> ">" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(rhs), op: BinOp::Lt, right: Box::new(lhs)}),
    <lhs: Add> ">=" <rhs: Add> => Expr::Binary(ExprBinary {left: Box::new(rhs), op: BinOp::Le, right: Box::new(lhs)}),
    Add,
};

And: Expr = {
    <lhs: And> "&&" <rhs: Relational> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::And, right: Box::new(rhs)}),
    Relational,
}

Or: Expr = {
    <lhs: Or> "||" <rhs: And> => Expr::Binary(ExprBinary {left: Box::new(lhs), op: BinOp::Or, right: Box::new(rhs)}),
    And,
}

pub Expr: Expr = {
    Or,
};

pub Type: Type = {
    "Ident" => Type::Ident(TypeIdent{name: <>}),
};

pub Pat: Pat = {
    "Ident" => Pat::Ident(PatIdent{ident: <>}),
    <pat: Pat> ":" <ty: Type> => Pat::Type(PatType{pat: Box::new(pat), ty: Box::new(ty)}),
};

pub Stmt: Stmt = {
    "let" <pat: Pat> "=" <init: Expr> ";" => Stmt::Local(Local {pat: pat, init: init}),
    <expr: Expr> => Stmt::Expr(expr),
    <expr: Expr> ";" => Stmt::Semi(expr),
}

extern {
    type Location = ();
    type Error = ();

    enum Token {
        "Lit" => Token::Lit(<Lit>),

        "Ident" => Token::Ident(<String>),

        "=" => Token::Eq,
        "<" => Token::Lt,
        "<=" => Token::Le,
        "==" => Token::EqEq,
        "!=" => Token::Ne,
        ">=" => Token::Ge,
        ">" => Token::Gt,
        "&&" => Token::AndAnd,
        "||" => Token::OrOr,
        "!" => Token::Not,

        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Star,
        "/" => Token::Slash,

        "(" => Token::OpenParen,
        ")" => Token::CloseParen,

        ";" => Token::Semi,
        ":" => Token::Colon,

        "let" => Token::Let,
    }
}